  #include <windows.h>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <sstream>
#include <cmath>
#include <vector>
#include <conio.h>
#include <stdarg.h>
#include "wavfile.h"
#include "obj_io.hpp"
#include "graphics.cpp"
#define WAVFILE_SAMPLES_PER_SECOND 44100
int ln = 4194304;
std::string graph[4194304];
int groots[4194304];
std::string grootsl[4194304];
int syslng = 10;
int its=0;
int it=0;
int NUM_SAMPLES = (WAVFILE_SAMPLES_PER_SECOND*8);
using namespace std;
using std::vector;
// Function Prototypes
void display();
void specialKeys();
// Global Variables
double rotate_y=0;
double rotate_x=0;
int numStr;
int indexSys;
bool finished = false;
int totVal;
std::string symbols[257];
std::string currentletter;
std::string itcurrent;
std::string blank = "";
string inputs;
int i;
int y;
int isq;
int icub;
int var;
int vartw;
int varth;
int varf;
int digMultiplier=1;
int digValue=0;
int sqCounter = 0;
int floorer;
int help;
bool twos=false;
bool twost=true;
string letterValue;


void digitalroot(const char * input[4194304]){
    cout << "digitalroot process begin";
    for (its = 0; its < ln; its++){
        inputs = input[its];
        int numStr=0;
        int indexSys=0;
        finished = false;
        if(syslng == 1){
            finished = true;
            groots[its] = 1;
            grootsl[its] = symbols[1];
        }
        if(syslng == 2){
            finished = true;
            groots[its] = 1;
            grootsl[its] = symbols[1];
            if(its/2 != floor(its/2)){
                groots[its] = 2;
                grootsl[its] = symbols[2];
            }
        }
        if(syslng <4 && syslng >2){
            finished = true;
            if(inputs.length() >0){
                indexSys=0;
                numStr=0;
                for(it = 0;finished !=true; indexSys++){
                    currentletter = symbols[indexSys];
                    itcurrent = inputs[0];
                    if(currentletter == itcurrent){
                        numStr = indexSys;
                        inputs.erase(0, 1);
                        indexSys = 0;
                        if(numStr = syslng && inputs == ""){
                            cout << "\ncheck" << currentletter << numStr;
                            inputs = inputs + graph[numStr-1];
                            numStr = 0;
                            indexSys = 0;
                            cout << inputs;
                        }
                        if(numStr < syslng && inputs == ""){
                            groots[its] = numStr;
                            grootsl[its] = symbols[numStr+1];
                            finished = true;
                        }
                    }
                }
            }
        }
        while(finished != true){
            if(inputs.length() >0){
                indexSys=0;
                numStr=0;
                for(it = 0;finished !=true; indexSys++){
                    currentletter = symbols[indexSys];
                    itcurrent = inputs[0];
                    if(currentletter == itcurrent){
                        numStr = numStr + indexSys;
                        inputs.erase(0, 1);
                        indexSys = 0;
                        if(numStr > syslng && inputs == ""){
                            inputs = inputs + graph[numStr];
                            numStr = 0;
                            indexSys = 0;
                        }
                        if(numStr <= syslng && inputs == ""){
                            groots[its] = numStr;
                            grootsl[its] = symbols[numStr];
                            finished = true;
                        }
                    }
                }
            }
            if(inputs.length() < 1){
                finished = true;
            }
        }
    }
}

int power;
void tablegen(int syslng){
    bool check=false;
    /*BOOM*/



    cout << "generating numbers...";
    for(i=1; i < ln; i++){
        if (syslng == 1){
            graph[i] = symbols[1];
            groots[i] = 1;
        }
        if (i <= syslng && syslng != 1){
            graph[i] = (symbols[i]);
            groots[i] = i;
        }
        finished = false;
        check = false;
        isq = 0;
        icub = 1;

        if (i>syslng && syslng != 1){
            varf = i;
            for(isq = 1; finished == false; isq = isq + 1){
                if (finished != true){
                    for (icub = 1; check != true; icub = icub + 1){
                        if((std::pow(double(syslng), (icub))) > i){
                            check = true;
                        }
                        sqCounter= icub;
                    }
                    if(sqCounter <1){
                    }
                    for(varth = 0; finished!=true; varth++){
                    help = 1;
                        for (int helpr = 0; helpr<=sqCounter-1; helpr++){
                            help = help*syslng;
                            }
                        help = help*syslng;
                        if(sqCounter < 3){
                            help = syslng;
                        }
                        if(varf-(std::pow(double(syslng), sqCounter-1)*varth) <= help && sqCounter>1){
                            power << (int)(std::pow(double(syslng), sqCounter-1));
                            varf = (varf - ((power)*varth));
                            graph[i] = graph[i] + symbols[varth];
                            groots[i] = groots[i] + varth;
                            sqCounter--;
                            varth=-1;
                        }
                        if (sqCounter < 2 && varf - varth == 0){
                            varf = (varf - varth);
                            graph[i] = graph[i] + symbols[varth];
                            groots[i] = groots[i] + varth;
                            sqCounter--;
                            finished = true;
                            varth = 0;
                        }
                    }
                }
                if (isq > ln){
                    std::cout << "something wrong";
                    finished=true;
                }
            }
        }
    }
    finished = false;
}

struct wavfile_header {
    char    riff_tag[4];
    int riff_length;
    char    wave_tag[4];
    char    fmt_tag[4];
    int fmt_length;
    short   audio_format;
    short   num_channels;
    int sample_rate;
    int byte_rate;
    short   block_align;
    short   bits_per_sample;
    char    data_tag[4];
    int data_length;
};

FILE * wavfile_open( const char *filename )
{
    struct wavfile_header header;

    int samples_per_second = WAVFILE_SAMPLES_PER_SECOND;
    int bits_per_sample = 16;

    strncpy(header.riff_tag,"RIFF",4);
    strncpy(header.wave_tag,"WAVE",4);
    strncpy(header.fmt_tag,"fmt ",4);
    strncpy(header.data_tag,"data",4);

    header.riff_length = 0;
    header.fmt_length = 16;
    header.audio_format = 1;
    header.num_channels = 1;
    header.sample_rate = samples_per_second;
    header.byte_rate = samples_per_second*(bits_per_sample/8);
    header.block_align = bits_per_sample/8;
    header.bits_per_sample = bits_per_sample;
    header.data_length = 0;

    FILE * file = fopen(filename,"w+");
    if(!file) return 0;

    fwrite(&header,sizeof(header),1,file);

    fflush(file);

    return file;

}

void wavfile_write( FILE *file, short data[], int length )
{
    fwrite(data,sizeof(short),length,file);
}

void wavfile_close( FILE *file )
{
    int file_length = ftell(file);

    int data_length = file_length - sizeof(struct wavfile_header);
    fseek(file,sizeof(struct wavfile_header) - sizeof(int),SEEK_SET);
    fwrite(&data_length,sizeof(data_length),1,file);

    int riff_length = file_length - 8;
    fseek(file,4,SEEK_SET);
    fwrite(&riff_length,sizeof(riff_length),1,file);

    fclose(file);
}
void objwriter ( std::string output_filename, int node_num, int face_num,
  int normal_num, int order_max, vector<double> node_xyz, vector<int> face_order,
  vector<int> face_node, vector<double> normal_vector, vector<int> vertex_normal ){
  int face;
  int i;
  int j;
  int node;
  int normal;
  std::ofstream output;
  short obj;
  int text_num;
  int vertex;
  double w;


  output.open ("object.obj");

  if ( !output )
  {
    cerr << "\n";
    cerr << "OBJ_WRITE - Fatal error!\n";
    cerr << "  Could not open the output file \"" << output_filename << "\".\n";
    exit ( 1 );
  }

  text_num = 0;

  output << "#DRACSFIGAS RENDER";
  output << "#obj_io::obj_write.C\n";
  output << "\n";
  output << "g Group001\n";

  text_num = text_num + 4;
  if ( 0 < node_num )
  {
    output << "\n";
    text_num = text_num + 1;
  }
  cout << "writing file";

  w = 1.0;
  for ( node = 0; node < node_num; node++ )
  {
    output << "v";
    for ( i = 0; i < 3; i++ )
    {
      output<< "  "<<node_xyz.at(i+3*node);
    }
    output << "  " << w << "\n";
    text_num = text_num + 1;
  }
  if ( 0 < normal_num )
  {
    output << "\n";
    text_num = text_num + 1;

    for ( normal = 0; normal < normal_num; normal++ )
    {
      output << "vn";
      for ( i = 0; i < 3; i++ )
      {
        output << "  " << normal_vector.at(i+normal*3);
      }
      output << "\n";
      text_num = text_num + 1;
    }
  }
  if ( 0 < face_num )
  {
    output << "\n";
    text_num = text_num + 1;
  }

  for ( face = 0; face < face_num; face++ )
  {
    output << "f";
    for ( vertex = 0; vertex < face_order.at(face); vertex++ )
    {
      output << "  " << face_node.at(vertex+face*order_max);
      if ( 0 < normal_num )
      {
        output << "//" << vertex_normal.at(vertex+face*order_max);
      }
    }
    output << "\n";
    text_num = text_num + 1;
  }
  output.flush();
  output.close ( );
  if ( false )
  {
    cout << "\n";
    cout << "OBJ_WRITE:\n";
    cout << "  Wrote " << text_num << " text lines to \""
       << output_filename << "\"\n";
  }

  return;
}
void timestamp ( ){
# define TIME_SIZE 40

  static char time_buffer[TIME_SIZE];
  const struct std::tm *tm_ptr;
  size_t len;
  std::time_t now;

  now = std::time ( NULL );
  tm_ptr = std::localtime ( &now );

  len = std::strftime ( time_buffer, TIME_SIZE, "%d %B %Y %I:%M:%S %p", tm_ptr );

  std::cout << time_buffer << "\n";

  return;
# undef TIME_SIZE
}

int main(){
   /*                                                                              LN LAST-|*/
    string input= "";
    int i=0;
    for (i = 0; i<256; i++){
        symbols[i] = char(i);
    }

    cout << "Welcome to Counting System-FIGURES, the generative rendering program, yielding\n";
    cout << "of interpretations of digital roots. Digital roots in this program are \n";
    cout << "constructed on a basis of a multiplication table, but with alternate counting\n";
    cout << "systems contrasted, different from 0-9. The data is then analyzed by adding the\n";
    cout << "imaginary digital symbols together, to achieve a single digit number.\n";
    cout << "\n\nYou may see your options once you make a selection of your desired counting\n";
    cout << "system length, and a text file of the first square root of the whole system is\n";
    cout << "thereafter generated.\n\n  Please pick a number between 1-256: ";
    getline (cin, input);
    stringstream(input) >> syslng;
    syslng = syslng +1;
    if (floor (syslng) > 256)
    {
        syslng = 10;
    }
    if (floor (syslng) < 1)
    {
        syslng = 10;
    }
    tablegen(syslng);
    cout << "\ndone.\n";
    int convertc=0;
    const char *graphchar[ln];
    malloc(4194304*16);

    for (convertc = 0; convertc < ln; convertc++){
        graphchar[convertc] = graph[convertc].c_str();
    }
    cout << "generating graphs...\n";
    digitalroot(graphchar);
    cout << "\ndone.\n";
    /*                                                                              LN LAST-|*/
    cout << "\n\n" << syslng-1 << " symbols in your system. Your available commands:\n";
    cout << ".txt table write: table\n";
    cout << "grahics and audio render: av\n";
    cout << "end:end\n\n";
    getline (cin, input);


    /* */

    /*image*/

    int isq;
    int icub;

    string color;
    string viewSymbols;
    string symbolsConnect;
    string lineSet;
    int tileIncrementx = 10;
    int tileIncrementy = 8;
    int tileScaler=128;
    int xOffset;
    int yOffset;
    bool polyFill;
    string look;
    int increm;
    int r=15,g=15,b=15;
    /* */
